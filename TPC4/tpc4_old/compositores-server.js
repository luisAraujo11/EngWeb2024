var http = require('http')
var fs = require('fs')
var url = require('url')
var axios = require('axios')

function genCompositores(compositores) {
    pagHTML = `
    <!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>Lista de Compositores</title>
        <link rel="stylesheet" href="w3.css"/>
    </head>
    <body>
        <div class="w3-card-4">

            <header class="w3-container w3-green">
              <h1>Lista de Compositores</h1>
            </header>
            
            <div class="w3-container">
              <table class="w3-table w3-striped">
                  <tr>
                    <th>id</th>
                  </tr>
                  <tr>
    `
    compositores.forEach(comp => {
        pagHTML += `
        <tr>
            <td><a href='/compositores/${comp.id}'>${comp.id}</a></td>
    
        </tr>
        `
    });
    pagHTML += `
    </table>
            </div>
            
            <footer class="w3-container w3-green">
                <h5>Generated by Compositores::EngWeb2024::A96351 [<a href="/"> Voltar à página anterior]</h5>
              </footer>
            </footer>
            
            </div> 
    </body>
</html>
    `
    return pagHTML
}

function genCompositor(compositor) {
    pagHTML = `
    <!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>Compositor ${compositor.id}</title>
        <link rel="stylesheet" href="w3.css"/>
    </head>
    <body>
        <div class="w3-card-4">

            <header class="w3-container w3-green">
              <h1>Compositor: ${compositor.nome}</h1>
            </header>
            
            <div class="w3-container">`
            pagHTML += `
                <h2>Biografia: ${compositor.bio}</h2>`


            pagHTML += `
                <h2>Data de Nascimento: ${compositor.dataNasc}</h2>`   
            
            pagHTML += `
                <h2>Data de Óbito: ${compositor.dataObito}</h2>`
                
            pagHTML += `
            <h2>Período: <a href='/periodos/${compositor.periodo}'>${compositor.periodo}</a></h2>
            `
            pagHTML += `</div>
              <footer class="w3-container w3-green">
              <h5>Generated by Compositores::EngWeb2024::A96351 [<a href="/compositores"> Voltar à página anterior]</h5>
              </footer>
              
              </div> 
      </body>
  </html>
    `
    return pagHTML
}

function genPeriodos(periodos) {
    pagHTML = `
    <!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>Lista de Períodos</title>
        <link rel="stylesheet" href="w3.css"/>
    </head>
    <body>
        <div class="w3-card-4">

            <header class="w3-container w3-green">
              <h1>Lista de Períodos</h1>
            </header>
            
            <div class="w3-container">
              <table class="w3-table w3-striped">
                  <tr>
                    <th>Períodos</th>
                  </tr>
                  <tr>
    `
    periodos.forEach(per => {
        pagHTML += `
        <tr>
            <td><a href='/periodos/${per.id}'>${per.id}</a></td>
        </tr>
        `
    });
    pagHTML += `
    </table>
            </div>
            
            <footer class="w3-container w3-green">
            <h5>Generated by Compositores::EngWeb2024::A96351 [<a href="/"> Voltar à página anterior]</h5>
            </footer>
            
            </div> 
    </body>
</html>
    `
    return pagHTML
}

function genPeriodo(periodo) {
    pagHTML = `
    <!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>Género ${periodo.id}</title>
        <link rel="stylesheet" href="w3.css"/>
    </head>
    <body>
        <div class="w3-card-4">

            <header class="w3-container w3-green">
              <h1>Género ${periodo.id}</h1>
            </header>
            
            <div class="w3-container">`
            periodo.list.forEach(per => {
                    pagHTML += `
                    <tr><a href='/compositores/${per}'>${per}</a></tr><br>`
            })
            pagHTML += `</div>
            
              <footer class="w3-container w3-green">
              <h5>Generated by Compositores::EngWeb2024::A96351 [<a href="/periodos"> Voltar à página anterior]</h5>
              </footer>
              
              </div> 
      </body>
  </html>
    `
    return pagHTML
}

http.createServer(function (req, res) {
    var regexcompositor = /^\/compositores\/[a-zA-Z0-9]{2,4}$/
    var regexperiodo = /^\/periodos\/\w+$/ 
    var q = url.parse(req.url, true)
    if (q.pathname == "/") { // pagina principal
        fs.readFile('principal.html', function (erro, dados) {
            res.writeHead(200, { 'Content-Type': 'text/html' })
            res.write(dados)
            res.end()
        })
    }
    else if (q.pathname == "/compositores") {
        axios.get('http://localhost:3000' + q.pathname) // GET request
            .then(resp => {
                data = resp.data;
                pagHTML = genCompositores(data)
                res.writeHead(200, { 'Content-Type': 'text/html' })
                res.write(pagHTML)
                res.end()
            })
            .catch(erro => {
                console.log(erro);
                res.writeHead(500, { 'Content-Type': 'text/html; charset=utf-8' })
                res.write('<pre>' + erro + '</pre>')
                res.end()
            });
    }
    else if (regexcompositor.test(q.pathname)) {
        console.log("ola")
        axios.get('http://localhost:3000' + q.pathname) // GET request
            .then(resp => {
                
                data = resp.data;
                pagHTML = genCompositor(data)
                res.writeHead(200, { 'Content-Type': 'text/html' })
                res.write(pagHTML)
                res.end()
            })
            .catch(erro => {
                //console.log(erro);
                res.writeHead(500, { 'Content-Type': 'text/html; charset=utf-8' })
                res.write('<pre>' + erro + '</pre>')
                res.end()
            });
    }

    else if (q.pathname == "/periodos") {
        axios.get('http://localhost:3000' + q.pathname) // GET request
            .then(resp => {
                data = resp.data;
                pagHTML = genPeriodos(data)
                res.writeHead(200, { 'Content-Type': 'text/html' })
                res.write(pagHTML)
                res.end()
            })
            .catch(erro => {
                console.log(erro);
                res.writeHead(500, { 'Content-Type': 'text/html; charset=utf-8' })
                res.write('<pre>' + erro + '</pre>')
                res.end()
            });
    }
    else if (regexperiodo.test(q.pathname)) {
        axios.get('http://localhost:3000' + q.pathname) // GET request
            .then(resp => {
                data = resp.data;
                pagHTML = genPeriodo(data)
                res.writeHead(200, { 'Content-Type': 'text/html' })
                res.write(pagHTML)
                res.end()
            })
            .catch(erro => {
                //console.log(erro);
                res.writeHead(500, { 'Content-Type': 'text/html; charset=utf-8' })
                res.write('<pre>' + erro + '</pre>')
                res.end()
            });
    }
    else if (q.pathname == '/w3.css') {
        fs.readFile('w3.css', function (erro, dados) {
            res.writeHead(200, { 'Content-Type': 'text/css' })
            res.write(dados)
            res.end()
        })
    }
    else if (q.pathname == '/compositores/w3.css') {
        fs.readFile('w3.css', function (erro, dados) {
            res.writeHead(200, { 'Content-Type': 'text/css' })
            res.write(dados)
            res.end()
        })
    }
    else if (q.pathname == '/periodos/w3.css') {
        fs.readFile('w3.css', function (erro, dados) {
            res.writeHead(200, { 'Content-Type': 'text/css' })
            res.write(dados)
            res.end()
        })
    }
    else {
        res.writeHead(400, { 'Content-Type': 'text/html; charset=utf-8' })
        res.write('<p>Erro: Pedido não suportado.</p>')
        res.write('<pre>' + q.pathname + '</pre>')
        res.end()
    }
    console.log(q.pathname)
}).listen(7777)