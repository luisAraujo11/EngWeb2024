var http = require('http')
var fs = require('fs')
var url = require('url')
var axios = require('axios')

function genFilmes(filmes) {
    pagHTML = `
    <!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>Lista de Filmes</title>
        <link rel="stylesheet" href="w3.css"/>
    </head>
    <body>
        <div class="w3-card-4">

            <header class="w3-container w3-green">
              <h1>Lista de Filmes</h1>
            </header>
            
            <div class="w3-container">
              <table class="w3-table w3-striped">
                  <tr>
                    <th>id</th>
                    <th>title</th>
                    <th>year</th>
                    <th>cast</th>
                    <th>genres</th>
                  </tr>
                  <tr>
    `
    filmes.forEach(film => {
        pagHTML += `
        <tr>
            <td><a href='/filmes/${film.id}'>${film.id}</a></td>
            <td>${film.title}</td>       
            <td>${film.year}</td>    
            <td>
            `
            if (film.cast) { // Check if atores is not undefined
                film.cast.forEach(ator => {
                    pagHTML += `<a href='/atores/${ator}'>${ator}</a>`
                });
            }
            pagHTML += `</td>
    
            <td>
            `
            if (film.genres) { // Check if generos is not undefined
                film.genres.forEach(gen => {
                    pagHTML += `<a href='/generos/${gen}'>${gen}</a>`
                });
            }
            pagHTML += `</td>  
        </tr>
        `
    });
    pagHTML += `
    </table>
            </div>
            
            <footer class="w3-container w3-green">
                <h5>Generated by FilmesUSA::EngWeb2024::A96351 [<a href="/"> Voltar à página anterior]</h5>
              </footer>
            </footer>
            
            </div> 
    </body>
</html>
    `
    return pagHTML
}

function genFilme(filme) {
    pagHTML = `
    <!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>Filme ${filme.id}</title>
        <link rel="stylesheet" href="w3.css"/>
    </head>
    <body>
        <div class="w3-card-4">

            <header class="w3-container w3-green">
              <h1>Filme: ${filme.title}</h1>
            </header>
            
            <div class="w3-container">`
            pagHTML += `
                <tr>Year: ${filme.year}</tr>`


                pagHTML += `
                <h2>Cast</h2>`    
                var atores = filme.cast
                atores.forEach(ator => {
                    pagHTML += `<a href='/atores/${ator}'>${ator}</a>`
                })
                
                pagHTML += `
                <h2>Genres</h2>
                </td>
                    <td>
                    `
                    var generos = filme.genres
                    generos.forEach(gen => {
                        pagHTML += `<a href='/generos/${gen}'>${gen}</a>`
                    })
                    pagHTML += `</td>  
                </tr>
               
                `
            pagHTML += `</div>
            
              <footer class="w3-container w3-green">
              <h5>Generated by FilmesUSA::EngWeb2024::A96351 [<a href="/filmes"> Voltar à página anterior]</h5>
              </footer>
              
              </div> 
      </body>
  </html>
    `
    return pagHTML
}

function genGeneros(generos) {
    pagHTML = `
    <!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>Lista de Generos</title>
        <link rel="stylesheet" href="w3.css"/>
    </head>
    <body>
        <div class="w3-card-4">

            <header class="w3-container w3-green">
              <h1>Lista de Géneros</h1>
            </header>
            
            <div class="w3-container">
              <table class="w3-table w3-striped">
                  <tr>
                    <th>genres</th>
                  </tr>
                  <tr>
    `
    generos.forEach(genre => {
        pagHTML += `
        <tr>
            <td><a href='/generos/${genre.id}'>${genre.id}</a></td>
        </tr>
        `
    });
    pagHTML += `
    </table>
            </div>
            
            <footer class="w3-container w3-green">
            <h5>Generated by FilmesUSA::EngWeb2024::A96351 [<a href="/"> Voltar à página anterior]</h5>
            </footer>
            
            </div> 
    </body>
</html>
    `
    return pagHTML
}

function genGenero(genero) {
    pagHTML = `
    <!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>Género ${genero.id}</title>
        <link rel="stylesheet" href="w3.css"/>
    </head>
    <body>
        <div class="w3-card-4">

            <header class="w3-container w3-green">
              <h1>Género ${genero.id}</h1>
            </header>
            
            <div class="w3-container">`
            genero.list.forEach(film => {
                    pagHTML += `
                    <tr><a href='/filmes/${film}'>${film}</a></tr><br>`
            })
            pagHTML += `</div>
            
              <footer class="w3-container w3-green">
              <h5>Generated by FilmesUSA::EngWeb2024::A96351 [<a href="/generos"> Voltar à página anterior]</h5>
              </footer>
              
              </div> 
      </body>
  </html>
    `
    return pagHTML
}

function genAtores(atores) {
    pagHTML = `
    <!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>Lista de Atores</title>
        <link rel="stylesheet" href="w3.css"/>
    </head>
    <body>
        <div class="w3-card-4">

            <header class="w3-container w3-green">
              <h1>Lista de Atores</h1>
            </header>
            
            <div class="w3-container">
              <table class="w3-table w3-striped">
                  <tr>
                    <th>Atores</th>
                  </tr>
                  <tr>
    `
    atores.forEach(actor => {
        pagHTML += `
        <tr>
            <td><a href='/atores/${actor.id}'>${actor.id}</a></td>
        </tr>
        `
    });
    pagHTML += `
    </table>
            </div>
            
            <footer class="w3-container w3-green">
            <h5>Generated by FilmesUSA::EngWeb2024::A96351 [<a href="/"> Voltar à página anterior]</h5>
            </footer>
            
            </div> 
    </body>
</html>
    `
    return pagHTML
}

function genAtor(ator) {
    pagHTML = `
    <!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>Ator ${ator.id}</title>
        <link rel="stylesheet" href="w3.css"/>
    </head>
    <body>
        <div class="w3-card-4">

            <header class="w3-container w3-green">
              <h1>Ator ${ator.id}</h1>
            </header>
            
            <div class="w3-container">`

            ator.list.forEach(film => {
                    pagHTML += `
                    <tr><a href='/filmes/${film}'>${film}</a></tr><br>`
            })
            pagHTML += `</div>
            
              <footer class="w3-container w3-green">
              <h5>Generated by FilmesUSA::EngWeb2024::A96351 [<a href="/atores"> Voltar à página anterior]</h5>
              </footer>
              
              </div> 
      </body>
  </html>
    `
    return pagHTML
}


http.createServer(function (req, res) {
    var regexfilme = /^\/filmes\/[a-z0-9]{24}$/ 
    var regexgenero = /^\/generos\/\w+$/ 
    var regexatores = /^\/atores\/\w+/ 
    var q = url.parse(req.url, true)
    if (q.pathname == "/") { // pagina principal
        fs.readFile('principal.html', function (erro, dados) {
            res.writeHead(200, { 'Content-Type': 'text/html' })
            res.write(dados)
            res.end()
        })
    }
    else if (q.pathname == "/filmes") {
        axios.get('http://localhost:3000' + q.pathname) // GET request
            .then(resp => {
                data = resp.data;
                pagHTML = genFilmes(data)
                res.writeHead(200, { 'Content-Type': 'text/html' })
                res.write(pagHTML)
                res.end()
            })
            .catch(erro => {
                console.log(erro);
                res.writeHead(500, { 'Content-Type': 'text/html; charset=utf-8' })
                res.write('<pre>' + erro + '</pre>')
                res.end()
            });
    }
    else if (regexfilme.test(q.pathname)) {
        axios.get('http://localhost:3000' + q.pathname) // GET request
            .then(resp => {
                
                data = resp.data;
                pagHTML = genFilme(data)
                res.writeHead(200, { 'Content-Type': 'text/html' })
                res.write(pagHTML)
                res.end()
            })
            .catch(erro => {
                //console.log(erro);
                res.writeHead(500, { 'Content-Type': 'text/html; charset=utf-8' })
                res.write('<pre>' + erro + '</pre>')
                res.end()
            });
    }

    else if (q.pathname == "/generos") {
        axios.get('http://localhost:3000' + q.pathname) // GET request
            .then(resp => {
                data = resp.data;
                pagHTML = genGeneros(data)
                res.writeHead(200, { 'Content-Type': 'text/html' })
                res.write(pagHTML)
                res.end()
            })
            .catch(erro => {
                console.log(erro);
                res.writeHead(500, { 'Content-Type': 'text/html; charset=utf-8' })
                res.write('<pre>' + erro + '</pre>')
                res.end()
            });
    }
    else if (regexgenero.test(q.pathname)) {
        axios.get('http://localhost:3000' + q.pathname) // GET request
            .then(resp => {
                data = resp.data;
                pagHTML = genGenero(data)
                res.writeHead(200, { 'Content-Type': 'text/html' })
                res.write(pagHTML)
                res.end()
            })
            .catch(erro => {
                //console.log(erro);
                res.writeHead(500, { 'Content-Type': 'text/html; charset=utf-8' })
                res.write('<pre>' + erro + '</pre>')
                res.end()
            });
    }

    else if (q.pathname == "/atores") {
        axios.get('http://localhost:3000' + q.pathname) // GET request
            .then(resp => {
                data = resp.data;
                pagHTML = genAtores(data)
                res.writeHead(200, { 'Content-Type': 'text/html' })
                res.write(pagHTML)
                res.end()
            })
            .catch(erro => {
                console.log(erro);
                res.writeHead(500, { 'Content-Type': 'text/html; charset=utf-8' })
                res.write('<pre>' + erro + '</pre>')
                res.end()
            });
            }
    else if (regexatores.test(q.pathname)) {
        axios.get('http://localhost:3000' + q.pathname) // GET request
            .then(resp => {
                data = resp.data;
                pagHTML = genAtor(data)
                res.writeHead(200, { 'Content-Type': 'text/html' })
                res.write(pagHTML)
                res.end()
            })
            .catch(erro => {
                //console.log(erro);
                res.writeHead(500, { 'Content-Type': 'text/html; charset=utf-8' })
                res.write('<pre>' + erro + '</pre>')
                res.end()
            });
            if (q.pathname == '/atores/w3.css') {
                fs.readFile('w3.css', function (erro, dados) {
                    res.writeHead(200, { 'Content-Type': 'text/css' })
                    res.write(dados)
                    res.end()
                })
            }

    }
    else if (q.pathname == '/w3.css') {
        fs.readFile('w3.css', function (erro, dados) {
            res.writeHead(200, { 'Content-Type': 'text/css' })
            res.write(dados)
            res.end()
        })
    }
    else if (q.pathname == '/filmes/w3.css') {
        fs.readFile('w3.css', function (erro, dados) {
            res.writeHead(200, { 'Content-Type': 'text/css' })
            res.write(dados)
            res.end()
        })
    }
    else if (q.pathname == '/generos/w3.css') {
        fs.readFile('w3.css', function (erro, dados) {
            res.writeHead(200, { 'Content-Type': 'text/css' })
            res.write(dados)
            res.end()
        })
    }
    else {
        res.writeHead(400, { 'Content-Type': 'text/html; charset=utf-8' })
        res.write('<p>Erro: Pedido não suportado.</p>')
        res.write('<pre>' + q.pathname + '</pre>')
        res.end()
    }
    console.log(q.pathname)
}).listen(7777)